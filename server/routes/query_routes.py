from flask import Blueprint, jsonify, request
from services.chroma_service import load_pdfs_into_chroma, query_documents
import os
import google.generativeai as genai

# === 1. הגדרת API KEY ל-Gemini ===
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# if not GEMINI_API_KEY:
#     raise ValueError("error. set GEMINI_API_KEY in your environment variables.")


# === 2. טעינת המסמכים עם הגנה מטעויות ===
try:
    load_pdfs_into_chroma()
    print("PDFs loaded successfully into ChromaDB.")
except Exception as e:
    print(f"Error loading PDFs into ChromaDB: {e}")

# === 3. יצירת ה-Blueprint ===
query_bp = Blueprint("query_bp", __name__)

# === 4. בריאות השרת ===
@query_bp.route("/ping", methods=["GET"])
def ping():
    return jsonify({"message": "Flask API is running!"})

# === 5. קבלת שאלה מהמשתמש ===
@query_bp.route("/query", methods=["POST"])
def query():
    data = request.get_json()
    user_query = data.get("query", "")

    if not user_query:
        return jsonify({"error": "query text not provided"}), 400

    # 5.1 שליפת המסמכים הרלוונטיים מ-ChromaDB
    chroma_result = query_documents(user_query)
    retrieved_texts = chroma_result.get("documents", [[]])[0]

    if not retrieved_texts:
        return jsonify({
            "query_received": user_query,
            "answer": "no relevant information found in the documents."
        })

    # 5.2 יצירת תשובה עם Gemini
    answer = generate_answer(user_query, retrieved_texts)

    # 5.3 החזרת תשובה לאנגולר
    return jsonify({
        "query_received": user_query,
        "retrieved_docs_count": len(retrieved_texts),
        "answer": answer
    })

# === 6. פונקציה ליצירת תשובה באמצעות Gemini ===
def generate_answer(user_query, retrieved_texts):
    """
    שולח את השאלה והמסמכים למודל Gemini ומחזיר תשובה מותאמת.
    """
    prompt = f"""
            Answer the following question based only on the provided documents.
            If the answer cannot be found in the documents, say "I don't have enough information to answer that."

            User question: {user_query}

            Relevant documents:
            {chr(10).join(retrieved_texts)}
            """

    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    return response.text.strip() if response.text else "No answer generated by Gemini."
