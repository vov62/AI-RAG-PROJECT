# server/services/gemini_service.py
import os
from dotenv import load_dotenv
# import google.generativeai as genai
from openai import OpenAI

# טוען משתני סביבה
load_dotenv()
# מקבל את ה-API Key של Gemini מהסביבה
# GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# if not GEMINI_API_KEY:
#     raise ValueError("Gemini API key is missing! Please set Gemini API KEY in your .env file.")

# try:
#     genai.configure(api_key=GEMINI_API_KEY)
# except Exception as e:
#     raise RuntimeError("Failed to configure Gemini API.") from e


# # שם המודל שבו נשתמש
# DEFAULT_MODEL = "gemini-2.0-flash"

# def get_gemini_answer(prompt, model_name=DEFAULT_MODEL, temperature=0.2):
 
#     try:
#         model = genai.GenerativeModel(model_name)
#         response = model.generate_content(
#             prompt,
#             generation_config=genai.types.GenerationConfig(
#                 temperature=temperature
#             )
#         )

#         return response.text.strip() if response.text else "No answer generated by Gemini"
    
#     except Exception as e:
#         print(f"error: {str(e)}")
#         return {"error": f"Unexpected error calling Gemini API.{str(e)}"}


OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


if not OPENAI_API_KEY:
    raise ValueError("OpenAI API key is missing, Please set OPENAI_API_KEY in your .env file.")

# === הגדרת הלקוח של OpenAI ===
client = OpenAI(api_key=OPENAI_API_KEY)

# === שם המודל שבו נשתמש ===
DEFAULT_MODEL = "gpt-4.1"

def get_openai_answer(prompt, model_name=DEFAULT_MODEL, temperature=0.2):
   
    try:
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": "You are a helpful assistant who answers only in Hebrew."},
                {"role": "user", "content": prompt}
            ],
            temperature=temperature,
        )

        # בדיקה שהתשובה קיימת
        if response and response.choices:
            return response.choices[0].message.content.strip()

        return "No answer generated by OpenAI."

    except Exception as e:
        print(f"[OpenAI Error] {str(e)}")
        return  f"Unexpected error calling OpenAI API: {str(e)}"